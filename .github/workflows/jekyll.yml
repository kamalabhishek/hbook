name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  repository_dispatch:
    types: [file-changed]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Clear Cache
        run: |
          git clean -ffdx
          rm -rf ~/.bundle
          bundle install


      # - name: Read and fetch data from symlinks
      #   run: |
      #     SYMLINKS=$(find . -type l)
      #     for SYMLINK_PATH in $SYMLINKS; do
      #       echo "symlink path $SYMLINK_PATH"
      #       URL=$(readlink $SYMLINK_PATH)
      #       # Extract owner, repo, and path from the URL
      #       IFS='/' read -ra URL_PARTS <<< "$URL"
      #       OWNER="${URL_PARTS[3]}"
      #       REPO="${URL_PARTS[4]}"
      #       BRANCH=$(echo "$URL" | grep -oP '(?<=/tree/)[^/]+')
      #       # If the branch is not found, default to "main"
      #       [ -z "$BRANCH" ] && BRANCH="main"            
      #       echo "branch: $BRANCH"
      #       PATH_AFTER_TREE="${URL_PARTS[8]}"
      #       # Construct API URL
      #       echo "PATH_AFTER_TREE: $PATH_AFTER_TREE"
      #       API_URL="https://api.github.com/repos/$OWNER/$REPO/contents/docs?ref=$BRANCH"
      #       echo "API_URL: $API_URL"
      #       FetchedFiles=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$API_URL" | jq -r '.[] | select(.type == "file") | .name, .download_url')
      #       echo "FetchedFiles: $FetchedFiles"
      #       # Extract the directory path without the filename
      #       TARGET_PATH="$(dirname "$SYMLINK_PATH")"
      #       rm "$SYMLINK_PATH"
      #       # Loop through fetched files and download them
      #       while IFS= read -r FILE_NAME && IFS= read -r DOWNLOAD_URL; do
      #         FetchedContent=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$DOWNLOAD_URL")
      #         # Replace symlink with fetched content
      #         echo "$FetchedContent" > "$TARGET_PATH/$FILE_NAME"
      #       done <<< "$FetchedFiles"
      #     done



      # - name: Read and fetch data from symlinks
      #   run: |
      #     SYMLINKS=$(find . -type l)
      #     for SYMLINK_PATH in $SYMLINKS; do
      #       echo "symlink path $SYMLINK_PATH"
      #       URL=$(readlink $SYMLINK_PATH)
      
      #       # Extract owner, repo, and path from the URL
      #       IFS='/' read -ra URL_PARTS <<< "$URL"
      #       OWNER="${URL_PARTS[3]}"
      #       REPO="${URL_PARTS[4]}"
      #       BRANCH=$(echo "$URL" | grep -oP '(?<=/tree/)[^/]+')
      
      #       # If the branch is not found, default to "main"
      #       [ -z "$BRANCH" ] && BRANCH="main"
      #       echo "branch: $BRANCH"
      #       # PATH_AFTER_TREE="${URL_PARTS[@]:8}"
      #       # Construct API URL
      #       # echo "PATH_AFTER_TREE: $PATH_AFTER_TREE"
      #       API_URL="https://api.github.com/repos/$OWNER/$REPO/contents/docs?ref=$BRANCH"
      #       echo "API_URL: $API_URL"
      
      #       API_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$API_URL")
      #       echo "API_RESPONSE: $API_RESPONSE"
      
      #       FetchedContents=$(echo "$API_RESPONSE" | jq -r 'if type == "array" then .[] else . end | if .type == "dir" then "\(.type)\n\(.path)\n\(.url)" else "\(.type)\n\(.path)\n\(.download_url)" end')
      #       echo "fetchedddd: $FetchedContents"
      
      #       # Extract the directory path without the filename
      #       TARGET_PATH="$(dirname "$SYMLINK_PATH")"
      
      #       # Remove existing symlink
      #       rm "$SYMLINK_PATH"
      
      #       # Loop through fetched contents and download them
      #       while IFS= read -r TYPE && IFS= read -r FILE_PATH && IFS= read -r DOWNLOAD_URL; do
      #         SUB_FILE_PATH="${FILE_PATH#docs/}"
      #         mkdir -p "$(dirname "$TARGET_PATH/$SUB_FILE_PATH")"
      #         echo "downloadd: $DOWNLOAD_URL"
      #         if [ "$TYPE" == "dir" ]; then
      #           # FILE_PATH=${FILE_PATH#docs/}
      #           # mkdir -p "$TARGET_PATH/$FILE_PATH"
      #           # Fetch all files and folders recursively from directory
      #           FetchedContents=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$DOWNLOAD_URL" | jq -r '.[] | .type, .path, .download_url')
      #           echo "fetched in iff: $FetchedContents"
      #           while IFS= read -r SUB_TYPE && IFS= read -r SUB_FILE_PATH && IFS= read -r SUB_DOWNLOAD_URL; do
      #             SUB_FILE_PATH="${SUB_FILE_PATH#docs/}"
      #             mkdir -p "$(dirname "$TARGET_PATH/$SUB_FILE_PATH")"
      #             # mkdir -p "$(dirname "$TARGET_PATH/$FILE_PATH/$SUB_FILE_PATH")"
      #             FetchedContent=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$SUB_DOWNLOAD_URL")
      #             echo "sub fetched in if while: $FetchedContent"
      #             # Replace symlink with fetched content
      #             echo "$FetchedContent" > "$TARGET_PATH/$SUB_FILE_PATH"
      #           done <<< "$FetchedContents"
      #         else
      #           # Fetch file content
      #           FetchedContent=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$DOWNLOAD_URL")
      #           echo "fetched in else: $FetchedContent"
      #           # Replace symlink with fetched content
      #           FILE_PATH=${FILE_PATH#docs/}
      #           mkdir -p "$(dirname "$TARGET_PATH/$FILE_PATH")"
      #           echo "$FetchedContent" > "$TARGET_PATH/$FILE_PATH"
      #         fi
      #       done <<< "$FetchedContents"
      #     done

      - name: Read and fetch data from symlinks
        run: |
          SYMLINKS=$(find . -type l)
          for SYMLINK_PATH in $SYMLINKS; do
            echo "symlink path $SYMLINK_PATH"
            URL=$(readlink $SYMLINK_PATH)
            
            # Extract owner, repo, and path from the URL
            IFS='/' read -ra URL_PARTS <<< "$URL"
            OWNER="${URL_PARTS[3]}"
            REPO="${URL_PARTS[4]}"
            BRANCH=$(echo "$URL" | grep -oP '(?<=/tree/)[^/]+')
            
            # If the branch is not found, default to "main"
            [ -z "$BRANCH" ] && BRANCH="main"
            echo "branch: $BRANCH"
            
            # Construct API URL
            API_URL="https://api.github.com/repos/$OWNER/$REPO/contents/docs?ref=$BRANCH"
            echo "API_URL: $API_URL"
            
            API_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$API_URL")
            echo "API_RESPONSE: $API_RESPONSE"
            
            fetch_contents() {
              local download_url="$1"
              local target_path="$2"
              
              local fetched_contents=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$download_url" | jq -r 'if type == "array" then .[] else . end | if .type == "dir" then "\(.type)\n\(.path)\n\(.url)" else "\(.type)\n\(.path)\n\(.download_url)" end')
              
              while IFS= read -r TYPE && IFS= read -r FILE_PATH && IFS= read -r DOWNLOAD_URL; do
                if [ "$TYPE" == "dir" ]; then
                  mkdir -p "$target_path/$FILE_PATH"
                  fetch_contents "$DOWNLOAD_URL" "$target_path/$FILE_PATH"
                else
                  FetchedContent=$(curl -s -H "Authorization: token ${{ secrets.TEST }}" "$DOWNLOAD_URL")
                  FILE_PATH=${FILE_PATH#docs/}
                  mkdir -p "$(dirname "$target_path/$FILE_PATH")"
                  echo "$FetchedContent" > "$target_path/$FILE_PATH"
                fi
              done <<< "$fetched_contents"
            }
            
            # Extract the directory path without the filename
            TARGET_PATH="$(dirname "$SYMLINK_PATH")"
            
            # Remove existing symlink
            rm "$SYMLINK_PATH"
            
            fetch_contents "$API_URL" "$TARGET_PATH"
          done


      - name: View folder structure
        run: tree .

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
